<?php
/**
 * This script provides SRU access to a mysql database containing TEI data
 * language profiles.
 * This script is responsible for handling FCS requests for language profile data. 
 * 
 * @uses $dbConfigfile
 * @uses $operation
 * @uses $query
 * @uses $version
 * @uses $scanClause
 * @uses responseTemplate
 * @uses responseTemplateFcs
 * @package mysqlonsru
 */
error_reporting(E_ALL);

 //load configuration
 require "../utils-php/config.php";

 if (isset($_GET['x-type']) && trim($_GET['x-type']) == "fcs") {
    $responseTemplate = $responseTemplateFcs;
}

function db_connect() {
    global $server;
    global $user;
    global $password;
    global $database;
    global $dbConfigFile;
    
     //load database and user data
    require_once $dbConfigFile;
 
    $db = new mysqli($server, $user, $password, $database);
    return $db;
}

/**
 * Generates a diagnostics response
 * 
 * @global type $scanDiagnosticsTemplate
 * @global type $version
 * @global type $vlibPath
 * @param type $dgId
 * @param type $dgDetails
 */
function diagnostics($dgId, $dgDetails)
 {
    global $scanDiagnosticsTemplate;
    global $version;
    global $vlibPath;

    //TODO: this needs to be based on diagnostics-list:
    //http://www.loc.gov/standards/sru/resources/diagnostics-list.html
    $diagnosticMessage = "Error";
    $diagnosticId = $dgId;
    $diagnosticDetails = $dgDetails;

    require_once $vlibPath;

   	$tmpl = new vlibTemplate($scanDiagnosticsTemplate);

   	$tmpl->setvar('version', $version);
   	$tmpl->setvar('diagnosticId', $diagnosticId);
   	$tmpl->setvar('diagnosticMessage', $diagnosticMessage);
   	$tmpl->setvar('diagnosticDetails', $diagnosticDetails);

   	$tmpl->pparse();
 }
/**
 * Generates a response according to ZeeRex
 * 
 * @see http://zeerex.z3950.org/overview/index.html
 * 
 * @global type $explainTemplate
 * @global type $vlibPath
 */
 function explain()
 {
    global $explainTemplate;
    global $vlibPath;

    require_once $vlibPath;

    $tmpl = new vlibTemplate($explainTemplate);
    
    $maps = array();
    
    array_push($maps, array(
        'title' => 'VICAV Profile',
        'name' => 'profile',
        'search' => 'true',
        'scan' => 'true',
        'sort' => 'false',
    ));
    
    array_push($maps, array(
        'title' => 'VICAV Profile Sample Text',
        'name' => 'sampleText',
        'search' => 'true',
        'scan' => 'true',
        'sort' => 'false',
    ));
    
    $tmpl->setLoop('maps', $maps);
    
    $tmpl->setVar('hostid', htmlentities($_SERVER["HTTP_HOST"]));
    $tmpl->setVar('database', 'vicav-profile');
    $tmpl->setVar('databaseTitle', 'VICAV Profile');
    $tmpl->pparse();
 }

 function decodecharrefs($str)
 {
   //str_replace("alt","neu","Zeichenkette")
   $str = str_replace("#9#", ";", $str);
   $str = str_replace("#8#", "&#", $str);
   return $str;
 }

 /**
  * Searches vicav_profiles_001 database using the lemma column
  * 
  * @uses $responseTemplate;
  * @uses $version;
  * @uses $recordSchema;
  * @uses $recordPacking;
  * @uses $server;
  * @uses $user;
  * @uses $password;
  * @uses $database;
  * @uses $vlibPath
  * @uses $query
  */
 function search($query) {
    global $responseTemplate;
    global $version;
    global $recordSchema;
    global $recordPacking;
    global $baseURL;

    global $vlibPath;

    require_once $vlibPath;

    $db = db_connect();
    if ($db->connect_errno) {
        diagnostics('MySQL Connection Error', 'Failed to connect to database: (' . $db->connect_errno . ") " . $db->connect_error);
        return;
    }

    $sqlstr = "SELECT DISTINCT id, entry FROM vicav_profiles_001 ";
    $sqlstr.= "WHERE lemma = '$query'";

    $result = $db->query($sqlstr);
    if ($result !== FALSE) {
        $numberOfRecords = $result->num_rows;

        $tmpl = new vlibTemplate($responseTemplate);

        $tmpl->setvar('version', $version);
        $tmpl->setvar('numberOfRecords', $numberOfRecords);
        $tmpl->setvar('query', $query);
        $tmpl->setvar('baseURL', $baseURL);
        // this isn't generated by fcs.xqm either ?!
        $nextRecordPosition = 0;
        $tmpl->setvar('nextRecordPosition', $nextRecordPosition);
        $tmpl->setvar('res', '1');

        $hits = array();
        $hitsMetaData = array();
        array_push($hitsMetaData, array('key' => 'copyright', 'value' => 'ICLTT'));
        $hstr = "Arabic dialect profile for the region of $query";
        array_push($hitsMetaData, array('key' => 'content', 'value' => $hstr));

        $line = $result->fetch_row();

        if ($line) {
            //$id = $line[0];
            $content = $line[1];

            array_push($hits, array(
                'recordSchema' => $recordSchema,
                'recordPacking' => $recordPacking,
                'queryUrl' => $baseURL,
                'content' => decodecharrefs($content),
                'hitsMetaData' => $hitsMetaData,
                'queryUrl' => '?' . htmlentities(http_build_query($_GET)),
            ));
        }
        $result->close();

        $tmpl->setloop('hits', $hits);
        $tmpl->pparse();
    } else {
        diagnostics('MySQL query error.', 'Query was: ' . $sqlstr);
    }
}

/**
 * Lists the entries from the lemma column in the vicav_profiles_001 database
 * 
 * Lists either the profiles (city names) or the sample texts ([id])
 * 
 * @see http://www.loc.gov/standards/sru/specs/scan.html
 * 
 * @uses $scanCollectionsTemplate
 * @uses $version
 * @uses $server
 * @uses $user
 * @uses $password
 * @uses $database
 * @uses $vlibPath
 * @uses $scanClause
 */
function scan($scanClause) {
    global $scanTemplate;
    global $version;

    global $vlibPath;

    require_once $vlibPath;

    $db = db_connect();
    if ($db->connect_errno) {
        diagnostics('MySQL Connection Error', 'Failed to connect to database: (' . $db->connect_errno . ") " . $db->connect_error);
        exit;
    }
    
    $sqlstr = '';
    
    if ($scanClause === '' || $scanClause === 'profile') {
       $sqlstr = "SELECT DISTINCT lemma, id FROM vicav_profiles_001 " .
              "WHERE lemma NOT LIKE '[%]'";   
    } else if ($scanClause === 'sampleText') {
       $sqlstr = "SELECT DISTINCT lemma, id FROM vicav_profiles_001 " .
              "WHERE lemma LIKE '[%]'";           
    } else {
        diagnostics('Result set does not exist', 'Result set: ' . $scanClause);
        return;
    }
    
    $maximumTerms = 100;

    $result = $db->query($sqlstr);

    $numberOfRecords = $result->num_rows;

    $tmpl = new vlibTemplate($scanTemplate);

    $terms = array();
    $startPosition = 0;
    $position = $startPosition;
    while ((($row = $result->fetch_row()) !== NULL) && 
           ($position < $maximumTerms + $startPosition)) {
        array_push($terms, array(
            'value' => $row[1],
            'displayTerm' => decodecharrefs($row[0]),
            'position' => ++$position,
            ));
    }
    
    $tmpl->setloop('terms', $terms);
    
    $tmpl->setVar('version', $version);
    $tmpl->setVar('count', $numberOfRecords);
    $tmpl->setVar('clause', $scanClause);
    $responsePosition = 0;
    $tmpl->setVar('responsePosition', $responsePosition);
    $tmpl->setVar('maximumTerms', $maximumTerms);

    $tmpl->pparse();
}

//sru params
  if (isset($_GET['operation']) && trim($_GET['operation']) != "")
    $operation = trim($_GET['operation']);
  else
    $operation = "";

  if (isset($_GET['version']) && trim($_GET['version']) != "")
    $version = trim($_GET['version']);

  if (isset($_GET['startRecord']) && trim($_GET['startRecord']) != "")
    $startRecord = trim($_GET['startRecord']);
  else
    $startRecord = "";

  if (isset($_GET['maximumRecords']) && trim($_GET['maximumRecords']) != "")
    $maximumRecords = trim($_GET['maximumRecords']);
  else
    $maximumRecords = "";

  if (isset($_GET['query']) && trim($_GET['query']) != "")
  {
    $query = trim($_GET['query']);
    $query = str_replace("|", "#", $query);
  }
  else
    $query = "";

  if (isset($_GET['scanClause']) && trim($_GET['scanClause']) != "")
    $scanClause = trim($_GET['scanClause']);
  else
    $scanClause = "";

  if (isset($_GET['recordPacking']) && trim($_GET['recordPacking']) == "xml")
    $recordPacking = trim($_GET['recordPacking']);
  else
    $recordPacking = "raw";

  header ("content-type: text/xml");
  //print "test";

  if ($operation == "explain" || $operation == "") {
    explain();
} else if ($operation == "scan") {
    scan($scanClause);
} else if ($operation == "searchRetrieve") {
    //print "query: $query";
    search($query);
}


    //diagnostics('test1', 'test message');

