<?php
/**
 * This script provides SRU access to a mysql database containing TEI data
 * language profiles.
 * This script is responsible for handling FCS requests for language profile data. 
 * 
 * @uses $dbConfigfile
 * @uses $sru_fcs_params
 * @uses $responseTemplate
 * @uses $responseTemplateFcs
 * @package mysqlonsru
 */
//error_reporting(E_ALL);

/**
 * Load configuration and common functions
 */
require_once "common.php";

// TODO: nachfragen.
// if (isset($_GET['x-type']) && trim($_GET['x-type']) == "fcs") {
//    $responseTemplate = $responseTemplateFcs;
//}

/**
 * Generates a response according to ZeeRex
 * 
 * This is a machine readable description of this script's capabilities.
 * 
 * @see http://zeerex.z3950.org/overview/index.html
 * 
 * @uses $explainTemplate
 */
 function explain()
 {
    global $explainTemplate;

    $tmpl = new vlibTemplate($explainTemplate);
    
    $maps = array();
    
    array_push($maps, array(
        'title' => 'VICAV Profile',
        'name' => 'profile',
        'search' => 'true',
        'scan' => 'true',
        'sort' => 'false',
    ));
    
    array_push($maps, array(
        'title' => 'VICAV Profile Sample Text',
        'name' => 'sampleText',
        'search' => 'true',
        'scan' => 'true',
        'sort' => 'false',
    ));
    
    $tmpl->setLoop('maps', $maps);
    
    $tmpl->setVar('hostid', htmlentities($_SERVER["HTTP_HOST"]));
    $tmpl->setVar('database', 'vicav-profile');
    $tmpl->setVar('databaseTitle', 'VICAV Profile');
    $tmpl->pparse();
 }

 /**
  * Searches vicav_profiles_001 database using the lemma column
  * 
  * @uses $responseTemplate
  * @uses $sru_fcs_params
  * @uses $baseURL
  */
 function search() {
    global $responseTemplate;
    global $sru_fcs_params;
    global $baseURL;

    $db = db_connect();
    if ($db->connect_errno) {
        diagnostics('MySQL Connection Error', 'Failed to connect to database: (' . $db->connect_errno . ") " . $db->connect_error);
        return;
    }

    
    // HACK, sql parser? cql.php = GPL -> this GPL too
    $query = "";
    $profile_query = preg_filter('/profile *(=|any) *(.*)/', '$2', $sru_fcs_params->query);
    $sampleText_query = preg_filter('/sampleText *(=|any) *(.*)/', '$2', $sru_fcs_params->query);
    if (isset($sampleText_query)) {
        $query = $db->escape_string($sampleText_query);
        $sqlstr = "SELECT DISTINCT sid, entry FROM vicav_profiles_001 ";
        $sqlstr.= "WHERE sid = '$query'";
    } else {
       if (isset($profile_query)) {
           $query = $db->escape_string($profile_query);
       } else {
           $query = $db->escape_string($sru_fcs_params->query);
       }
       $sqlstr = "SELECT DISTINCT id, entry FROM vicav_profiles_001 ";
       $sqlstr.= "WHERE lemma = '$query'";
    }

    $result = $db->query($sqlstr);
    if ($result !== FALSE) {
        $numberOfRecords = $result->num_rows;

        $tmpl = new vlibTemplate($responseTemplate);

        $tmpl->setvar('version', $sru_fcs_params->version);
        $tmpl->setvar('numberOfRecords', $numberOfRecords);
        $tmpl->setvar('query', $query);
        $tmpl->setvar('baseURL', $baseURL);
        // this isn't generated by fcs.xqm either ?!
        $nextRecordPosition = 0;
        $tmpl->setvar('nextRecordPosition', $nextRecordPosition);
        $tmpl->setvar('res', '1');

        $hits = array();
        $hitsMetaData = array();
        array_push($hitsMetaData, array('key' => 'copyright', 'value' => 'ICLTT'));
        $hstr = "Arabic dialect profile for the region of $query";
        array_push($hitsMetaData, array('key' => 'content', 'value' => $hstr));

        $line = $result->fetch_row();

        if ($line) {
            //$id = $line[0];
            $content = $line[1];

            array_push($hits, array(
                'recordSchema' => $sru_fcs_params->recordSchema,
                'recordPacking' => $sru_fcs_params->recordPacking,
                'queryUrl' => $baseURL,
                'content' => decodecharrefs($content),
                'hitsMetaData' => $hitsMetaData,
                // TODO: replace this by sth. like $sru_fcs_params->http_build_query
                'queryUrl' => '?' . htmlentities(http_build_query($_GET)),
            ));
        }
        $result->close();

        $tmpl->setloop('hits', $hits);
        $tmpl->pparse();
    } else {
        diagnostics('MySQL query error.', 'Query was: ' . $sqlstr);
    }
}

/**
 * Lists the entries from the lemma column in the vicav_profiles_001 database
 * 
 * Lists either the profiles (city names) or the sample texts ([id])
 * 
 * @see http://www.loc.gov/standards/sru/specs/scan.html
 * 
 * @uses $scanCollectionsTemplate
 * @uses $sru_fcs_params
 */
function scan() {
    global $scanTemplate;
    global $sru_fcs_params;

    $db = db_connect();
    if ($db->connect_errno) {
        diagnostics('MySQL Connection Error', 'Failed to connect to database: (' . $db->connect_errno . ") " . $db->connect_error);
        exit;
    }
    
    $sqlstr = '';
    
    if ($sru_fcs_params->scanClause === '' || $sru_fcs_params->scanClause === 'profile') {
       $sqlstr = "SELECT DISTINCT lemma, id FROM vicav_profiles_001 " .
              "WHERE lemma NOT LIKE '[%]'";   
    } else if ($sru_fcs_params->scanClause === 'sampleText') {
       $sqlstr = "SELECT DISTINCT sid, id FROM vicav_profiles_001 " .
              "WHERE sid LIKE '%_sample_%'";           
    } else {
        diagnostics('Result set does not exist', 'Result set: ' . $sru_fcs_params->scanClause);
        return;
    }
    
    $maximumTerms = 100;

    $result = $db->query($sqlstr);

    $numberOfRecords = $result->num_rows;

    $tmpl = new vlibTemplate($scanTemplate);

    $terms = array();
    $startPosition = 0;
    $position = $startPosition;
    //TODO: fetch_array is also avaliable for sqlite3. Change? (tests)
    while ((($row = $result->fetch_row()) !== NULL) && 
           ($position < $maximumTerms + $startPosition)) {
        array_push($terms, array(
            'value' => decodecharrefs($row[0]),
//            'displayTerm' => ???,
            'position' => ++$position,
            ));
    }
    
    $tmpl->setloop('terms', $terms);
    
    $tmpl->setVar('version', $sru_fcs_params->version);
    $tmpl->setVar('count', $numberOfRecords);
    $tmpl->setVar('clause', $sru_fcs_params->scanClause);
    $responsePosition = 0;
    $tmpl->setVar('responsePosition', $responsePosition);
    $tmpl->setVar('maximumTerms', $maximumTerms);

    $tmpl->pparse();
}

$sru_fcs_params = new SRUWithFCSParameters("lax");
// TODO: what's this for ???
$sru_fcs_params->query = str_replace("|", "#", $sru_fcs_params->query);
// TODO: why ... ???
if ($sru_fcs_params->recordPacking !== "xml") {
    $sru_fcs_params->recordPacking = "raw";
}

header ("content-type: text/xml");
  //print "test";

if ($sru_fcs_params->operation == "explain" || $sru_fcs_params->operation == "") {
    explain();
} else if ($sru_fcs_params->operation == "scan") {
    scan();
} else if ($sru_fcs_params->operation == "searchRetrieve") {
    search();
}


    //diagnostics('test1', 'test message');

