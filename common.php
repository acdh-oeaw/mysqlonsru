<?php

/**
 * Common functions used by all the scripts using the mysql database.
 * 
 * @uses $dbConfigfile
 * @package mysqlonsru
 */
/**
 * Configuration options and function common to all fcs php scripts
 */
require_once "../utils-php/common.php";

/**
 * Load database and user data
 */
require_once $dbConfigFile;

/**
 * Get a database connection object (currently mysqli)
 * 
 * @uses $server
 * @uses $user
 * @uses $password
 * @uses $database
 * @return \mysqli
 */
function db_connect() {
    global $server;
    global $user;
    global $password;
    global $database;

    $db = new mysqli($server, $user, $password, $database);
    if ($db->connect_errno) {
        diagnostics(1, 'MySQL Connection Error: Failed to connect to database: (' . $db->connect_errno . ") " . $db->connect_error);
    }
    return $db;
}

/**
 * Process custom encoding used by web_dict databases
 * 
 * @param string $str
 * @return string
 */
function decodecharrefs($str) {
    $replacements = array(
        "#9#" => ";",
        "#8#" => "&#",
//     "%gt" => "&gt;",
//     "%lt" => "&lt;",
//     "&#amp;" => "&amp;",
//     "&#x" => "&x",
    );
    foreach ($replacements as $search => $replace) {
        $str = str_replace($search, $replace, $str);
    }
    return $str;
}

/**
 * Genereates an SQL statement that can be used to fetch data from tables used
 * and generated by web_dict_editor. The result contains the text searched for
 * in the first column and the (full text) entry in the second one. Optionally
 * the third column, lemma, contains the lemma associated with the entry.
 * @param string $table Name of the table to search in.
 * @param string $xpath XPath like statement of the form -node-node-node-
 * @param array $options Options: show-lemma => return a lemma column
 *                                query => The term searched for in the specified nodes
 *                                filter => A term to filter from the specified nodes, eg. - (no text)
 *                                distinct-values => whether the result should have only a single
 *                                                   column for each term found among the XPaths                              
 * @return string
 */
function sqlForXPath($table, $xpath, $options = NULL) {
    $lemma = "";
    $query = "";
    $filter = "";
    if (isset($options) && is_array($options)) {
        if (isset($options["show-lemma"]) && $options["show-lemma"] === true) {
            $lemma = ", base.lemma";
        }
        if (isset($options["query"])) {
            $q = $options["query"];
            $query .= " AND ndx.txt = '$q'";
        }
        if (isset($options["filter"])) {
            $f = $options["filter"];
            $filter .= " AND ndx.txt != '$f'";
        }
        if (isset($options["distinct-values"]) && $options["distinct-values"] === true) {
            $filter .= "GROUP BY ndx.txt ORDER BY ndx.txt";
        }
    }
    return "SELECT ndx.txt, base.entry".$lemma." FROM " .
            $table . " AS base " .
            "INNER JOIN " . $table . "_ndx AS ndx ON base.id = ndx.id " .
            "WHERE ndx.xpath LIKE '%" . $xpath . "'".$query.$filter;            
}

/**
 * Get the URL the client requested so this script was called
 * @return string The URL the client requested.
 */
function curPageURL() {
    $pageURL = 'http';
    if (isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"] == "on") {
        $pageURL .= "s";
    }
    $pageURL .= "://";
    if ($_SERVER["SERVER_PORT"] != "80") {
        $pageURL .= $_SERVER["SERVER_NAME"] . ":" . $_SERVER["SERVER_PORT"] . $_SERVER["PHP_SELF"];
    } else {
        $pageURL .= $_SERVER["SERVER_NAME"] . $_SERVER["PHP_SELF"];
    }
    return $pageURL;
}

/**
 * Execute a search and return the result using the $responseTemplate
 * @uses $responseTemplate
 * @uses $sru_fcs_params
 * @param object $db An object supporting query($sqlstr) which should return a
 *                   query object supporting fetch_row(). Eg. a mysqli object
 *                   or an sqlite3 object.
 * @param type $sqlstr A query string to exequte using $db->query()
 * @param type $description A description used by the $responseTemplate.
 */
function populateSearchResult($db, $sqlstr, $description) {
    global $responseTemplate;
    global $sru_fcs_params;
    
    $baseURL = curPageURL();
    
    $result = $db->query($sqlstr);
    if ($result !== FALSE) {
        $numberOfRecords = $result->num_rows;

        $tmpl = new vlibTemplate($responseTemplate);

        $tmpl->setVar('version', $sru_fcs_params->version);
        $tmpl->setVar('numberOfRecords', $numberOfRecords);
        // There is currently no support for limiting the number of results.
        $tmpl->setVar('returnedRecords', $numberOfRecords);
        $tmpl->setVar('query', $sru_fcs_params->query);
        $tmpl->setVar('transformedQuery', $sqlstr);
        $tmpl->setVar('baseURL', $baseURL);
        $tmpl->setVar('xcontext', $sru_fcs_params->xcontext);
        $tmpl->setVar('xdataview', "full");
        // this isn't generated by fcs.xqm either ?!
        $nextRecordPosition = 0;
        $tmpl->setVar('nextRecordPosition', $nextRecordPosition);
        $tmpl->setVar('res', '1');

        $hits = array();
        $hitsMetaData = array();
        array_push($hitsMetaData, array('key' => 'copyright', 'value' => 'ICLTT'));
        array_push($hitsMetaData, array('key' => 'content', 'value' => $description));

        while (($line = $result->fetch_row()) !== NULL) {
            //$id = $line[0];
            $content = $line[1];

            array_push($hits, array(
                'recordSchema' => $sru_fcs_params->recordSchema,
                'recordPacking' => $sru_fcs_params->recordPacking,
                'queryUrl' => $baseURL,
                'content' => decodecharrefs($content),
                'hitsMetaData' => $hitsMetaData,
                // TODO: replace this by sth. like $sru_fcs_params->http_build_query
                'queryUrl' => '?' . htmlentities(http_build_query($_GET)),
            ));
        }
        $result->close();

        $tmpl->setloop('hits', $hits);
        $tmpl->pparse();
    } else {
        diagnostics(1, 'MySQL query error: Query was: ' . $sqlstr);
    }
}

/**
 * Execute a scan and return the result using the $scanTemplate
 * @uses $scanTemplate
 * @uses $sru_fcs_params
 * @param object $db An object supporting query($sqlstr) which should return a
 *                   query object supporting fetch_row(). Eg. a mysqli object
 *                   or an sqlite3 object.
 * @param type $sqlstr A query string to exequte using $db->query()
 */
function populateScanResult($db, $sqlstr) {
    global $scanTemplate;
    global $sru_fcs_params;
    
    $maximumTerms = 100;

    $result = $db->query($sqlstr);
    if ($result !== FALSE) {
        $numberOfRecords = $result->num_rows;

        $tmpl = new vlibTemplate($scanTemplate);

        $terms = array();
        $startPosition = 0;
        $position = $startPosition;
        while ((($row = $result->fetch_array()) !== NULL) &&
        ($position < $maximumTerms + $startPosition)) {
            $term = array(
                'value' => decodecharrefs($row[0]),
                'numberOfRecords' => 1,
                'position' => ++$position,
            );
            if (isset($row["lemma"]) && decodecharrefs($row["lemma"]) !== $term["value"]) {
                $term["displayTerm"] = decodecharrefs($row["lemma"]);
            }
            array_push($terms, $term);
        }

        $tmpl->setloop('terms', $terms);

        $tmpl->setVar('version', $sru_fcs_params->version);
        $tmpl->setVar('count', $numberOfRecords);
        $tmpl->setVar('clause', $sru_fcs_params->scanClause);
        $responsePosition = 0;
        $tmpl->setVar('responsePosition', $responsePosition);
        $tmpl->setVar('maximumTerms', $maximumTerms);

        $tmpl->pparse();
    } else {
        diagnostics(1, 'MySQL query error: Query was: ' . $sqlstr);
    }
}
/**
 * Initializes the global object holding the parameters and switches off the
 * header declaration of xml on request. (TODO discuss ???)
 * @uses $sru_fcs_params
 */
function getParamsAndSetUpHeader() {
    global $sru_fcs_params;
    
    $sru_fcs_params = new SRUWithFCSParameters("lax");
// TODO: what's this for ???
    $sru_fcs_params->query = str_replace("|", "#", $sru_fcs_params->query);
    if ($sru_fcs_params->recordPacking === "") {
        $sru_fcs_params->recordPacking = "xml";
    }
// TODO: why ... ???
    if ($sru_fcs_params->recordPacking !== "xml") {
        $sru_fcs_params->recordPacking = "raw";
    }

    if ($sru_fcs_params->recordPacking === "xml") {
        header("content-type: text/xml");
    }
}

/**
 * Switching function that initiates the correct action as specified by the
 * operation member of $sru_fcs_params.
 * @uses $sru_fcs_params
 */
function processRequest() {
    global $sru_fcs_params;
    
    if ($sru_fcs_params->operation == "explain" || $sru_fcs_params->operation == "") {
        explain();
    } else if ($sru_fcs_params->operation == "scan") {
        scan();
    } else if ($sru_fcs_params->operation == "searchRetrieve") {
        search();
    }
}